{"version":3,"sources":["services/people.js","components/Person.js","components/Notification.js","components/Footer.js","components/FamilyMemberForm.js","App.js","index.js"],"names":["baseUrl","id","axios","get","then","response","data","newObject","post","Person","person","useState","parents","setParents","useEffect","forEach","a","peopleRequest","returnedPerson","concat","name","className","map","parent","bio","Notification","message","Footer","style","color","fontStyle","fontSize","FamilyMemberForm","addPersonToList","currentListOfPeople","newPersonName","setNewPersonName","newPersonBio","setNewPersonBio","newPersonParent1","setNewPersonParent1","newPersonParent2","setNewPersonParent2","newPersonPartner","setNewPersonPartner","newPersonChildren","setNewPersonChildren","getParentsArray","parentsArray","push","length","onSubmit","event","preventDefault","personObject","children","partner","htmlFor","value","onChange","target","e","type","App","people","setPeople","errorMessage","initialPeople","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.226dfd6d.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = 'http://localhost:3001/api/people';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n}\n\nconst get = (id) => {\n  const request = axios.get(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n}\n\nexport default { \n  get, getAll, create, update\n}","import React, { useEffect, useState } from 'react';\nimport peopleRequest from '../services/people';\n\nconst Person = ({ person }) => {\n  const [parents, setParents] = useState([]);\n  \n  const getParentsArray = () => {\n    person.parents.forEach(async id => {\n      await peopleRequest\n      .get(id)\n        .then(returnedPerson => {\n          setParents((parents) => parents.concat({name: returnedPerson.name, id: returnedPerson.id}));\n      })\n    });\n  }\n  // update using ref instead of useEffect\n  useEffect(() => {\n    if (person.parents) {\n      getParentsArray();\n    }\n  }, []);\n\n  return (\n    <li className='person'>\n      <div>Name: {person.name}</div>\n      <div>Parents: \n        {parents.map(parent => {\n          return <div key={`${person.id}-${parent.id}`}>{parent.name}</div>;\n        })}\n      </div>\n      <div>Bio: {person.bio}</div>\n    </li>\n  )\n}\n\nexport default Person\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Family Tree App</em>\n    </div>\n  )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react';\nimport peopleRequest from '../services/people';\n\nconst FamilyMemberForm = ({\n  addPersonToList,\n  currentListOfPeople\n  }) => {\n  const [newPersonName, setNewPersonName] = useState('');\n  const [newPersonBio, setNewPersonBio] = useState('');\n  const [newPersonParent1, setNewPersonParent1] = useState('');\n  const [newPersonParent2, setNewPersonParent2] = useState('');\n  const [newPersonPartner, setNewPersonPartner] = useState('');\n  const [newPersonChildren, setNewPersonChildren] = useState([]);\n\n  const resetNewPersonFields = () => {\n    setNewPersonName('');\n    setNewPersonBio('');\n    setNewPersonPartner('');\n    setNewPersonChildren([]);\n  };\n\n  const getParentsArray = () => {\n    const parentsArray = [];\n\n    if (newPersonParent1) parentsArray.push(newPersonParent1);\n    if (newPersonParent2) parentsArray.push(newPersonParent2);\n\n    if (parentsArray.length === 0) {\n       return null;\n    }\n\n    return parentsArray;\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    \n    const personObject = {\n      name: newPersonName,\n      bio: newPersonBio,\n      parents: getParentsArray(), // via dropdown list of names of people already added to DB\n      children: newPersonChildren, // via dropdown list of names of people already added to DBc\n      partner: newPersonPartner\n    }\n\n    peopleRequest\n      .create(personObject)\n        .then(returnedPerson => {\n          addPersonToList(currentListOfPeople.concat(returnedPerson));\n          resetNewPersonFields();\n      })\n  };\n\n  const handlePersonNameChange = (event) => {\n    setNewPersonName(event.target.value);\n  };\n\n  const handlePersonBioChange = (event) => {\n    setNewPersonBio(event.target.value);\n  };\n\n  return (\n    <form onSubmit={addPerson}>\n        <label htmlFor='fullNameInput'>\n          Full Name:\n          <input\n            id='fullNameInput'\n            value={newPersonName}\n            onChange={handlePersonNameChange}\n          />\n        </label>\n        <label htmlFor='selectParent1'>\n          choose parent 1:\n          <select value={newPersonParent1} onChange={(e) => setNewPersonParent1(e.target.value)}>\n            <option />\n            {currentListOfPeople.map((person => {\n              return <option key={`parent1-list-${person.id}`} value={person.id}>{person.name}</option>\n            }))}\n            <option value='parent not listed'>parent not listed</option>\n          </select>\n        </label>\n        <label htmlFor='selectParent2'>\n          choose parent 2:\n          <select value={newPersonParent2} onChange={(e) => setNewPersonParent2(e.target.value)}>\n            <option />\n            {currentListOfPeople.map((person => {\n              return <option key={`parent2-list-${person.id}`} value={person.id}>{person.name}</option>\n            }))}\n            <option value='parent not listed'>parent not listed</option>\n          </select>\n        </label>\n        <label htmlFor='bioInput'>\n          <div>Bio:</div>\n          <textarea\n            id='bioInput'\n            value={newPersonBio}\n            onChange={handlePersonBioChange}\n          />\n         </label>\n        <button type=\"submit\">save</button>\n      </form>  \n  );\n};\n\nexport default FamilyMemberForm;\n","import React, { useState, useEffect } from 'react';\nimport Person from './components/Person';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport FamilyMemberForm from './components/FamilyMemberForm';\nimport peopleRequest from './services/people';\n\nconst App = () => {\n  const [people, setPeople] = useState([]);\n  // const [newPersonName, setNewPersonName] = useState('');\n  // const [newPersonBio, setNewPersonBio] = useState('');\n  // const [newPersonPartner, setNewPersonPartner] = useState('');\n  // const [newPersonParents, setNewPersonParents] = useState([]);\n  // const [newPersonChildren, setNewPersonChildren] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    peopleRequest\n      .getAll()\n      .then(initialPeople => {\n      setPeople(initialPeople);\n    })\n  }, []);\n\n  return (\n    <div>\n      <h1>Family Members</h1>\n      <Notification message={errorMessage} />  \n      <ul>\n        {people.map(person => \n            <Person\n              key={person.id}\n              person={person}\n            />\n        )}\n      </ul>\n      <h2>Add Family Member</h2>\n        <FamilyMemberForm addPersonToList={setPeople} currentListOfPeople={people} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}